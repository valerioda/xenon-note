{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def pmt_plot(c_dm,c_0vbb,PMTs,dm_active_channels,v0bb_active_channels,\n",
    "             label='',figsize=(11, 4), s=230, alpha=1,\n",
    "             pmt_label_size=7, pmt_label_color='white',\n",
    "             log_scale=False, extend='neither', vmin=None, vmax=None,\n",
    "             **kwargs):\n",
    "    \n",
    "    \"\"\"Plots the PMT arrays, using c as a color scale\"\"\"\n",
    "    \n",
    "    if vmin is None:\n",
    "        vmin = min(c_dm.min(),c_0vbb.min()) \n",
    "    if vmax is None:\n",
    "        vmax = max(c_dm.max(),c_0vbb.max()) \n",
    "    \n",
    "    r = 79.79 * 1.1 #slightly enlarged tpc radius\n",
    "    \n",
    "    f, axes = plt.subplots(3, 1, figsize=figsize)\n",
    "    for array_i, array_name in enumerate(['top', 'bottom','top']):\n",
    "        ax = axes[array_i]\n",
    "        ax.tick_params(labelsize = 16)\n",
    "        plt.sca(ax)\n",
    "        ax.set_aspect('equal')\n",
    "            \n",
    "        plt.xlim(-r, r)\n",
    "        plt.ylim(-r, r)\n",
    "\n",
    "        #active channels\n",
    "        pos_x = []\n",
    "        pos_y = []\n",
    "        pmt_num = []\n",
    "        mask_list = []\n",
    "\n",
    "        #inactive channels\n",
    "        pos_x_missing = []\n",
    "        pos_y_missing = []\n",
    "        pmt_num_missing = []\n",
    "        mask_list_missing = []\n",
    "\n",
    "        if array_i == 0 or array_i == 1: #dm arrays\n",
    "            plt.title(f'DM Channels:{array_name.capitalize()}',fontsize=20)\n",
    "            for i in range(len(PMTs)):\n",
    "\n",
    "                if not PMTs['pmt'][i] in dm_active_channels: #inactive channels\n",
    "                    mask = PMTs['array'][i] == array_name\n",
    "                    mask_list_missing.append(mask)\n",
    "                    if mask == True:\n",
    "                        pos_x_missing.append(PMTs['x'][i])\n",
    "                        pos_y_missing.append(PMTs['y'][i])\n",
    "                        pmt_num_missing.append(PMTs['pmt'][i])\n",
    "                else:\n",
    "                    mask = PMTs['array'][i] == array_name\n",
    "                    mask_list.append(mask)\n",
    "                    if mask == True:\n",
    "                        pos_x.append(PMTs['x'][i])\n",
    "                        pos_y.append(PMTs['y'][i])\n",
    "                        pmt_num.append(PMTs['pmt'][i])\n",
    "\n",
    "            plt.scatter(pos_x, \n",
    "                        pos_y,\n",
    "                        s=s, c=c_dm[mask_list], \n",
    "                        alpha=alpha,\n",
    "                        vmin=vmin, vmax=vmax,\n",
    "                        norm=matplotlib.colors.LogNorm() if log_scale else None,\n",
    "                        **kwargs)\n",
    "\n",
    "            plt.xlabel('distance (cm)',fontsize=16)\n",
    "            plt.ylabel('distance (cm)',fontsize=16)\n",
    "\n",
    "            #label active channels\n",
    "            if pmt_label_size:\n",
    "                for p in range(len(pos_x)):\n",
    "                    plt.text(pos_x[p], pos_y[p], str(pmt_num[p]),\n",
    "                             horizontalalignment='center', verticalalignment='center',\n",
    "                             fontsize=pmt_label_size, color=pmt_label_color)\n",
    "\n",
    "            #label missing channels\n",
    "            if pmt_label_size:\n",
    "                for p in range(len(pos_x_missing)):\n",
    "                    plt.text(pos_x_missing[p], pos_y_missing[p], 'X',\n",
    "                             horizontalalignment='center', verticalalignment='center',\n",
    "                             fontsize=pmt_label_size*2, color='red')\n",
    "        else: #0vbb array\n",
    "            plt.title(f'0vbb Channels:{array_name.capitalize()}',fontsize=20)\n",
    "            \n",
    "            for i in range(len(PMTs[PMTs['array'] == 'top'])):\n",
    "                if not PMTs['pmt_lg'][i] in v0bb_active_channels: \n",
    "                    mask = PMTs['array'][i] == array_name\n",
    "                    mask_list_missing.append(mask)\n",
    "                    if mask == True:\n",
    "                        pos_x_missing.append(PMTs['x'][i])\n",
    "                        pos_y_missing.append(PMTs['y'][i])\n",
    "                        pmt_num_missing.append(PMTs['pmt_lg'][i])\n",
    "                else:\n",
    "                    mask = PMTs['array'][i] == array_name\n",
    "                    mask_list.append(mask)\n",
    "                    if mask == True:\n",
    "                        pos_x.append(PMTs['x'][i])\n",
    "                        pos_y.append(PMTs['y'][i])\n",
    "                        pmt_num.append(PMTs['pmt_lg'][i])\n",
    "\n",
    "            plt.scatter(pos_x, \n",
    "                        pos_y,\n",
    "                        s=s, c=c_0vbb[mask_list], \n",
    "                        alpha=alpha,\n",
    "                        vmin=vmin, vmax=vmax,\n",
    "                        norm=matplotlib.colors.LogNorm() if log_scale else None,\n",
    "                        **kwargs)\n",
    "\n",
    "            plt.xlabel('distance (cm)',fontsize=16)\n",
    "            plt.ylabel('distance (cm)',fontsize=16)\n",
    "\n",
    "            if pmt_label_size:\n",
    "                for p in range(len(pos_x)):\n",
    "                    plt.text(pos_x[p], pos_y[p], str(pmt_num[p]),\n",
    "                             horizontalalignment='center', verticalalignment='center',\n",
    "                             fontsize=pmt_label_size, color=pmt_label_color)\n",
    "\n",
    "            if pmt_label_size:\n",
    "                for p in range(len(pos_x_missing)):\n",
    "                    plt.text(pos_x_missing[p], pos_y_missing[p], 'X',\n",
    "                             horizontalalignment='center', verticalalignment='center',\n",
    "                             fontsize=pmt_label_size*2, color='red')\n",
    "    \n",
    "    cbar = plt.colorbar(ax=axes, extend=extend, label=label)\n",
    "    cbar.set_label(label, size=16)\n",
    "    cbar.ax.tick_params(labelsize=16)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
